import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn import preprocessing

from google.colab import drive
drive.mount("/content/drive")

dataset = pd.read_csv('/content/drive/MyDrive/weatherAUS.csv')

X = dataset.iloc[:,[1,2,3,4,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]].values
Y = dataset.iloc[:,-1].values

print(X)

print(Y)

Y = Y.reshape(-1,1)

from sklearn.impute import SimpleImputer
imputer = SimpleImputer(missing_values=np.nan,strategy='most_frequent')
X = imputer.fit_transform(X)
Y = imputer.fit_transform(Y)

print(X)

print(Y)

from sklearn.preprocessing import LabelEncoder
le1 = LabelEncoder()
X[:,0] = le1.fit_transform(X[:,0])
le2 = LabelEncoder()
X[:,4] = le2.fit_transform(X[:,4])
le3 = LabelEncoder()
X[:,6] = le3.fit_transform(X[:,6])
le4 = LabelEncoder()
X[:,7] = le4.fit_transform(X[:,7])
le5 = LabelEncoder()
X[:,-1] = le5.fit_transform(X[:,-1])
le6 = LabelEncoder()
Y[:,-1] = le6.fit_transform(Y[:,-1])

print(X)

print(Y)

Y = np.array(Y,dtype=float)
print(Y)

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X = sc.fit_transform(X)

print(X)

from sklearn.model_selection import train_test_split
X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size=0.2,random_state=42)

# X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

print(X_train)

print(Y_train)

corrmat = dataset.corr(method = "spearman")
plt.figure(figsize=(20,20))
#plot heat map
g=sns.heatmap(corrmat,annot=True)

sns.boxplot(data=dataset).set(title="Box Plot of weather")

plt.figure(figsize=(10, 6))
sns.histplot(dataset['MaxTemp'], bins=30, kde=True, color='blue')
plt.title('Max Temperature Distribution')
plt.xlabel('Max Temperature (°C)')
plt.ylabel('Frequency')
plt.show()

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
model_lr = LogisticRegression(random_state=42)
model_lr.fit(X_train, Y_train)
y_pred_lr = model_lr.predict(X_test)
accuracy_lr = accuracy_score(Y_test, y_pred_lr)
print(f'Logistic Regression Accuracy: {accuracy_lr:.2f}')

from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
model_rf = RandomForestClassifier(n_estimators=100, random_state=42)
model_rf.fit(X_train, Y_train)
y_pred_rf = model_rf.predict(X_test)
accuracy_rf = accuracy_score(Y_test, y_pred_rf)
print(f'Random Forest Accuracy: {accuracy_rf:.2f}')

from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.preprocessing import LabelEncoder

dataset.dropna(inplace=True)

le = LabelEncoder()
dataset['WindGustDir'] = le.fit_transform(dataset['WindGustDir'])
dataset['WindDir9am'] = le.fit_transform(dataset['WindDir9am'])
dataset['WindDir3pm'] = le.fit_transform(dataset['WindDir3pm'])
dataset['RainToday'] = le.fit_transform(dataset['RainToday'])
dataset['RainTomorrow'] = le.fit_transform(dataset['RainTomorrow'])

X = dataset.drop(['Date', 'Location', 'RainTomorrow'], axis=1)
y = dataset['RainTomorrow']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

clf = DecisionTreeClassifier(random_state=42)

clf.fit(X_train, y_train)

from sklearn.model_selection import cross_val_score, StratifiedKFold
from sklearn.ensemble import RandomForestClassifier
import numpy as np
model_rf = RandomForestClassifier(n_estimators=100, random_state=42)
cv = StratifiedKFold(n_splits=5, shuffle=True, random_state=42)
cv_scores = cross_val_score(model_rf, X, y, cv=cv, scoring='accuracy')
print(f"Cross-Validation Mean Accuracy: {np.mean(cv_scores):.2%}")
print(f"Cross-Validation Standard Deviation: {np.std(cv_scores):.2%}")

y_pred = clf.predict(X_test)

accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy:.2f}")

pip install gradio

import gradio as gr

# Define input components
inputs = [
    gr.Textbox(label="Date"),  # Assuming Date is in string format
    gr.Textbox(label="Location"),
    gr.Number(label="MinTemp"),
    gr.Number(label="MaxTemp"),
    gr.Number(label="Rainfall"),
    gr.Textbox(label="WindGustDir"),
    gr.Number(label="WindGustSpeed"),
    gr.Textbox(label="WindDir9am"),
    gr.Textbox(label="WindDir3pm"),
    gr.Number(label="WindSpeed9am"),
    gr.Number(label="WindSpeed3pm"),
    gr.Number(label="Humidity9am"),
    gr.Number(label="Humidity3pm"),
    gr.Number(label="Pressure9am"),
    gr.Number(label="Pressure3pm"),
    gr.Number(label="Cloud9am"),
    gr.Number(label="Cloud3pm"),
    gr.Number(label="Temp9am"),
    gr.Number(label="Temp3pm"),
    gr.Radio(["Yes", "No"], label="RainToday")
]

# Define output components
output = gr.Textbox(label="RainTomorrow Prediction")

# Define the function to perform prediction
def predict(date, location, min_temp, max_temp, rainfall, evaporation, sunshine, wind_gust_dir, wind_gust_speed, wind_dir_9am, wind_dir_3pm, wind_speed_9am, wind_speed_3pm, humidity_9am, humidity_3pm, pressure_9am, pressure_3pm, cloud_9am, cloud_3pm, temp_9am, temp_3pm, rain_today):
    # Here, you can perform any preprocessing or data transformation if needed
    # For now, we'll just return a placeholder value
    return "No"

# Create the Gradio interface
iface = gr.Interface(fn=predict, inputs=inputs, outputs=output)

# Launch the interface
iface.launch()
